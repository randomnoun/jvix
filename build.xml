<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="all">

    <!--
      Ant build settings
      ==================
       
      If you are working on this in a team environment, you may wish
      to create a file in the src/resources/properties folder with a filename
      set to "computerName-userName.properties". Any properties 
      specified in this file will be specific to your computer/user
      combination, and will therefore not impact other developers.
      
      If you're the only person who will be looking at this,
      then you can modify this file directly.
      
      Properties you may wish to modify:
      
        jdkDir:    location of a Java JDK
                   required for JNI includes; 
                   defaults to "C:/Java/j2sdk1.4.2_15"
      
        vixDir:    location of the VIX directory
                   defaults to "C:/Program Files/VMware/VMware VIX"
        
        cygwinDir: location of cygwin (for gcc etc)
                   defaults to "C:/cygwin"
                   
        bin.cvs:   location of a WSAD/Eclipse-compatible CVS executable
        		   defaults to "C:/Program Files/CVSNT/cvs.exe"
        
      Feel free to override any others.
      
   -->
          
	<!-- environment imports -->
    <property environment="env"/>

	<!-- per-user properties must be specified *before* other properties -->
    <property file="src/resources/properties/${env.COMPUTERNAME}-${user.name}.properties" />

    <!-- deployment imports (override in ../src/resources/properties folder) -->
    <property name="windowsDir" value="C:/WINDOWS" />
    <property name="cygwinInstallDir" value="C:/cygwin"/>
    <property name="vixDir" value="C:/Program Files/VMware/VMware VIX" />
	<property name="jdkDir" value="C:/Java/j2sdk1.4.2_15" />
	<property name="bin.cvs" value="C:/Program Files/CVSNT/cvs.exe" />
	
    <property name="bin.gcc" value="${cygwinInstallDir}/bin/gcc" />
    <property name="bin.bash" value="${cygwinInstallDir}/bin/bash" />
	<property name="bin.zip" value="${cygwinInstallDir}/bin/zip" />
	<property name="bin.find" value="${cygwinInstallDir}/bin/find" />
	<property name="bin.cut" value="${cygwinInstallDir}/bin/cut" />
	
	<!-- used in build database and release filenames -->
	<!-- increment this number as soon as a release has been uploaded to sourceforge --> 
	<property name="jvixReleaseVersion" value="0.2" />
	
	<property name="currentDir" value="${user.dir}" />
	<property name="increaseBuildNumber" value="false" />

	<path id="classpath.build.target"   location="build/class" />
	
	<!-- all JARs in the lib/compile folder; these are needed for compilation but are not 
	     not needed when using the library 
	  -->
	<path id="classpath.compile.lib">
	  <fileset dir="lib/compile" includes="*.jar" />
	</path>
	
	<!-- all JARs in the lib/runtime folder; these are needed for compilation at when
	     jvix is deployed
	  -->
	<path id="classpath.runtime.lib">
	  <fileset dir="lib/runtime" includes="*.jar" />
	</path>
	
    <path id="classpath.emma">
      <pathelement path="lib/compile/emma.jar" />
      <pathelement path="lib/compile/emma_ant.jar" />
    </path>
	<path id="classpath.all.lib">
      <path refid="classpath.compile.lib" />
      <path refid="classpath.runtime.lib" />
    </path>
    <path id="classpath.run">
      <path refid="classpath.runtime.lib" />
      <path refid="classpath.build.target" />
    </path>
    
    <path id="classpath.javac">
      <fileset dir="${jdkDir}/jre/lib">
        <include name="*.jar"/>
      </fileset>
    </path>


    <!--
      **********************************************************************
      * taskdef section
      *
      -->

	<taskdef resource="emma_ant.properties" classpathref="classpath.emma" />
	
    <!--
      **********************************************************************
      * target section
      *
      -->

	<target name="all" description="Complete build"
		depends="buildSleep, buildVixWrapper, buildJvixJar" >
		
	</target>
	
	<target name="_init" description="Create directories required by other targets">
	  <echo message="Reading build property file 'src/resources/properties/${env.COMPUTERNAME}-${user.name}.properties'" />
	  <echo message="Creating build directory structure ..."/>
	  <mkdir dir="build/class" />
	  <mkdir dir="build/emma" />
	  <mkdir dir="build/junit" />
	  <mkdir dir="build/dist" />
      <mkdir dir="build/dll" />
	  <mkdir dir="build/exe" />
	  <mkdir dir="build/h" />
	  <mkdir dir="build/jar" />
	  <mkdir dir="build/jni" />
	  <mkdir dir="build/javadoc" />
	</target>
	
	<condition property="testIncreaseBuildNumber">
		<equals arg1="${increaseBuildNumber}" arg2="false" />
	</condition>
	<target name="_increaseBuildNumber" description="Increase build number; only run this on the main build machine" unless="testIncreaseBuildNumber">
	  <echo message="Increasing build number"/>
      <java classname="net.sf.jvix.util.IncreaseBuildNumber" 
         fork="true" 
         dir="."
         jvm="${jdkDir}/bin/java"
         failonerror = "true"
      >
        <classpath>
          <path refid="classpath.all.lib" />
          <path location="build/class" />
        </classpath> 
        <arg value="--jdbcUrl" />
        <arg value="${buildDatabase.jdbcUrl}" />
        <arg value="--username" />
        <arg value="${buildDatabase.username}" />
        <arg value="--password" />
        <arg value="${buildDatabase.password}" />
        <arg value="--product" />
        <arg value="jvix" />
        <arg value="--release" />
        <arg value="${jvixReleaseVersion}" />
        <arg value="--baseDir" />
        <arg value="." />
        <arg value="--source" />
        <arg value="src/java" />
        <arg value="--source2" />
        <arg value="src/c" />
        <arg value="--file" />
        <arg value="src/resources/jvixBuild.properties" />
      </java>
	</target>
    
    <target name="buildClasses" depends="_init" description="Compiles all java source into the build/class directory">
      <javac 
         destdir="build/class"
 	     compiler="classic"
	     bootclasspathref="classpath.javac"
	     debug="on"
      >
        <classpath refid="classpath.all.lib" />
        <src path="src/java" />
        <include name="net/sf/jvix/**"/>
      </javac>
    	
      <!-- can comment this out if not running within eclipse -->
	  <!-- <eclipse.refreshLocal resource="jvix" /> -->

    </target>
    
    <target name="buildJvixJar" depends="_init, buildClasses" description="Create the jvix.jar" >
      <!-- if we start i18n'ing things later 
      <echo message="Copying src/*.txt" />
	  <copy todir="build/class">
	      <fileset dir="src/java" includes="**/*.txt" />
	  </copy>
	  -->
      <echo message="Generating .jar file" />
      <antcall target="_increaseBuildNumber" />
	  <jar jarfile="build/jar/jvix.jar" basedir="build/class" />
    </target>

    <target name="clean" description="Clean out the ./build directories">
        <delete dir="build/class" />
        <delete dir="build/dll" />
    	<delete dir="build/h" />
    	<delete dir="build/jar" />
    	<delete dir="build/jni" />
    	<delete dir="build/javadoc" />
    </target>


	<target name="buildVixWrapper" depends="_init" description="Create VIX JNI wrapper">
      <!-- would be good to statically compile these once I google how to do it -->
	  <copy file="${vixDir}/ws-2/32bit/iconv.dll" tofile="build/jni/iconv.dll"/>
	  <copy file="${vixDir}/ws-2/32bit/libeay32.dll" tofile="build/jni/libeay32.dll"/>
	  <copy file="${vixDir}/ws-2/32bit/libxml2.dll" tofile="build/jni/libxml2.dll"/>
	  <copy file="${vixDir}/ws-2/32bit/ssleay32.dll" tofile="build/jni/ssleay32.dll"/>	  
	  <copy file="${vixDir}/ws-2/32bit/vix.dll" tofile="build/jni/vix.dll"/>
	  <copy file="${vixDir}/ws-2/32bit/vmcryptolib.dll" tofile="build/jni/vmcryptolib.dll"/>
	  <copy file="${vixDir}/ws-2/32bit/zlib1.dll" tofile="build/jni/zlib1.dll"/>
	  <copy file="${vixDir}/ws-2/32bit/vix.lib" tofile="build/jni/vix.lib"/>
	  <copy file="${vixDir}/ws-2/32bit/fipsSigs.dat" tofile="build/jni/fipsSigs.dat"/>
	  <exec executable="${jdkDir}\bin\javah" >
  	    <arg value="-classpath" />
  	    <arg value="build/class" />
	    <arg value="-o" />
	    <arg value="build/h/VixWrapper.h" />
	    <arg value="net.sf.jvix.VixWrapper" />
      </exec>
	  <exec executable="${bin.gcc}" 
        dir="build/jni" >
	    <arg value="-v" />
	    <arg value="-mno-cygwin" />
	    <arg value="-I../h" />
	    <arg value="-I${jdkDir}/include" />
	  	<arg value="-I${jdkDir}/include/win32" />
	    <arg value="-I${vixDir}" /> 
	    <arg value="-L${vixDir}/ws-2/32bit" />	    
	    <arg value="-Wl,--add-stdcall-alias" />
	    <arg value="-shared" />
	    <arg value="-D_M_IX86" />
	    <arg value="-DNT" />
	    <arg value="-o" />
	    <arg value="jvix.dll" />
	    <arg value="../../src/c/VixWrapper.c" />
	    <arg value="${vixDir}/ws-2/32bit/vix.dll" />
	  </exec>
	  <copy file="build/jni/jvix.dll" tofile="build/dll/jvix.dll"/>
	</target>

	<target name="buildSleep" depends="_init" description="Create the sleep executable">
      <!-- would be good to statically compile these once I google how to do it -->
	  <exec executable="${bin.gcc}" 
        dir="build/jni" >
	    <arg value="-v" />
	    <!-- <arg value="-mno-cygwin" /> -->
	    <arg value="-Wl,--add-stdcall-alias" />
	    <arg value="-D_M_IX86" />
	    <arg value="-DNT" />
	    <arg value="-o" />
	    <arg value="sleep.exe" />
	    <arg value="../../src/c/sleep.c" />
	  </exec>
	  <copy file="build/jni/sleep.exe" tofile="build/exe/sleep.exe"/>
	</target>


    <!-- additionalparam="-J-Xss20M -J-Xmx128M" -->
	<target name="javadoc" depends="_init" description="Runs the standard java doclet over the Java source code">
		<!-- stylesheetfile="src/resources/doclet\doc-files\stylesheet.css" -->
		<javadoc access="public"
            destdir="build/javadoc"
            additionalparam="-breakiterator "
            sourcepath="src/java"
			stylesheetfile="doc/javadoc-stylesheet.css" 
          >
		  
          <classpath refid="classpath.all.lib" />
          <packageset dir="src/java" >
             <include name="net/sf/jvix/**/*" />
          </packageset>
        </javadoc>
    </target>
	
	<target name="statcvs" depends="_init" description="Generate statistics this project.">
	    <echo message="Generating CVS log" />
		<echo>
Warning: the first time you run this, this task may appear to
hang. If you check the 'build/statcvs/cvs.log' file and it requests
confirmation of the server's SSL key, then run the following lines
from a command line:

	C:\Documents and Settings\knoxg\My Documents\workspace\jvix>"c:\program files\cvsnt\cvs" login
	Logging in to :extssh:yourusername@jvix.cvs.sourceforge.net:22:/cvsroot/jvix
	CVS Password: xxxxxx
	The server's host key is not cached in the registry. You
	have no guarantee that the server is the computer you
	think it is.
	The server's key fingerprint is:
	1024 21:20:02:30:ef:5f:cc:6d:38:1a:36:4b:fc:5f:33:57
	If you trust this host, hit Yes to add the key to
	PuTTY's cache and carry on connecting.
	If you want to carry on connecting just once, without
	adding the key to the cache, hit No.
	If you do not trust this host, hit Cancel to abandon the
	connection.			

and then hit "Y"
			
(ignore this message if you have already performed the steps above)			
		</echo>

		<mkdir dir="build/statcvs" />
		<exec dir="." 
			executable="${bin.cvs}" 
			output="build/statcvs/cvs.log"
			
		>
			<arg value="log" />
			<redirector error="build/statcvs/cvs-error.log" />
		</exec>
		<echo message="Generating CVS statistics" />
        <java classname="net.sf.statcvs.Main" 
			fork="true" 
	        dir="build/statcvs"
	        jvm="${jdkDir}/bin/java"
	        failonerror = "true"
        	
	     >
	        <classpath>
	          <path refid="classpath.all.lib" />
	        </classpath> 
	        <arg value="./cvs.log" />
	        <arg value="../.." />
		</java>
	    <echo message="Refreshing project" />
	    <!-- doesn't work in Eclipse Europa (v3.3.0)
	    <eclipse.refreshLocal resource="jvix" />
	    -->
	</target>
	
	<target name="distribution" depends="all" description="Creates a JVIX distribution for uploading to sourceforge">
		<mkdir dir="build/dist" />
		<delete file="build/dist/jvix-${jvixReleaseVersion}-bin.zip"/>
		<delete file="build/dist/jvix-${jvixReleaseVersion}-src.zip"/>
		<!-- binary-only archive (inclueds runtime JARs) -->
		<exec executable="${bin.zip}" dir="build/dist" >
		    <arg value="-rj" />
		    <arg value="jvix-${jvixReleaseVersion}-bin.zip" />
		    <arg value="../../doc/README.txt" />
		    <arg value="../../doc/lgpl-3.0.txt" />
		    <arg value="../../build/jar/jvix.jar" />
		    <arg value="../../build/dll/jvix.dll" />
		</exec>
		<exec executable="${bin.zip}" dir="build" >
		    <arg value="-r" />
		    <arg value="dist/jvix-${jvixReleaseVersion}-bin.zip" />
			<arg value="javadoc" />
		</exec>
		<exec executable="${bin.zip}" dir="." >
		    <arg value="-r" />
		    <arg value="dist/jvix-${jvixReleaseVersion}-bin.zip" />
			<arg value="lib/runtime" />
		</exec>
		
		<!-- binary + source archive -->
		<copy 
			file="build/dist/jvix-${jvixReleaseVersion}-bin.zip"
		    tofile="build/dist/jvix-${jvixReleaseVersion}-src.zip" 
		/>
		<exec executable="${bin.zip}" dir="." >
		    <arg value="-r" />
		    <arg value="build/dist/jvix-${jvixReleaseVersion}-src.zip" />
			<arg value="build.xml" />
			<arg value="src" />
		    <arg value="lib" />
		    <arg value="-x" />
		    <arg value="\*CVS\*" />
		    <arg value="-x" />
		    <arg value="\*jvixBuild.properties" />
		</exec>
	</target>

	<target name="emma" depends="buildJvixJar">

	  <!-- create instrumented MessageManager classes -->
	  <emma enabled="true" >
        <instr instrpathref="classpath.run"
             destdir="${basedir}/build/emma/class"	
             metadatafile="${basedir}/build/emma/report/metadata.emma"
             merge="true"
        >
          <!-- don't include meridian yet -->
          <filter includes="net.sf.jvix.*" />
          <filter excludes="net.sf.jvix.util.IncreaseBuildNumber" />
        </instr>
      </emma>
     
      <!-- create instrumented meridian classes (not used in test below, but handy) -->
      <copy file="build/jar/jvix.jar" tofile="build/jar/jvix-emma.jar" />
	  <emma enabled="true" >
        <instr instrpath="build/jar/jvix-emma.jar"
             mode="overwrite"
             merge="false"
        >
          <filter includes="net.sf.jvix.*" />
        </instr>
      </emma>
      <java classname="net.sf.jvix.test.TestVix" fork="true"
      	dir="build/jni"
        output="${basedir}/build/junit/reports-emma.txt"
      >
        <classpath>
          <pathelement location="build/emma/class" />
          <path refid="classpath.run" />
          <path refid="classpath.emma" />
        </classpath>
		<jvmarg value="-Djava.library.path=${basedir}\build\jni" />
        <jvmarg value="-Demma.coverage.out.file=${basedir}/build/emma/report/coverage.emma" />
        <jvmarg value="-Demma.coverage.out.merge=false" />
      </java>
      <emma enabled="true" >
        <report>
          <fileset dir="build/emma/report" >
            <include name="*.emma" />
          </fileset>
          <sourcepath path="src\java" />
          <txt outfile="build/emma/report/coverage.txt" />
          <html outfile="build/emma/report/coverage.html" />
        </report>
      </emma>
	</target>
	
	
</project>